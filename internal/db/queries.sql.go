// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const createRoutes = `-- name: CreateRoutes :exec
INSERT INTO routes (id, name, source_lat, source_lng, destination_lat, destination_lng) VALUES(?,?,?,?,?,?)
`

type CreateRoutesParams struct {
	ID             int32
	Name           sql.NullString
	SourceLat      sql.NullString
	SourceLng      sql.NullString
	DestinationLat sql.NullString
	DestinationLng sql.NullString
}

func (q *Queries) CreateRoutes(ctx context.Context, arg CreateRoutesParams) error {
	_, err := q.db.ExecContext(ctx, createRoutes,
		arg.ID,
		arg.Name,
		arg.SourceLat,
		arg.SourceLng,
		arg.DestinationLat,
		arg.DestinationLng,
	)
	return err
}

const getRoutes = `-- name: GetRoutes :many
SELECT id, name, source_lat, source_lng, destination_lat, destination_lng FROM routes
`

func (q *Queries) GetRoutes(ctx context.Context) ([]Route, error) {
	rows, err := q.db.QueryContext(ctx, getRoutes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Route
	for rows.Next() {
		var i Route
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.SourceLat,
			&i.SourceLng,
			&i.DestinationLat,
			&i.DestinationLng,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
